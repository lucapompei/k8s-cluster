pipeline {

  // Incoming data
  parameters {

    // Base data
    string(name: 'projectName', description: 'The project name')
    string(name: 'gitUrl', description: 'The project git url')
    string(name: 'gitBranch', description: 'The project git branch to use to run CI/CD')
    string(name: 'gitProductionBranch', defaultValue: 'master', 
      description: 'The branch used for production release, for which the git tag became mandatory')
    
    // Build data
    string(name: 'jdkVersion', defaultValue: 'OpenJDK-11', description: 'The JDK to use to build the project')
    booleanParam(name: 'mavenBuildAllowed', defaultValue: true, description: 'Indicates whether the Maven build is allowed')
	  booleanParam(name: 'mavenTestsAllowed', defaultValue: true, description: 'Indicates whether the Maven tests are allowed')
    string(name: 'customMavenCommand', defaultValue: '', description: 'A custom maven command to use for building phase')
    string(name: 'customMavenSettingsId', defaultValue: '9c08e08c-5a68-49a6-93d1-dc985035b399', description: 'A custom maven settings.xml to use for building phase referred with the Jenkins file ID') 
    string(name: 'sonarAllowedBranches', defaultValue: 'develop', description: 'The comma-separated list of branches for which use Sonar')

    // Kubernetes data
    booleanParam(name: 'toKubernetes', defaultValue: false, description: 'Indicates whether the deployment is directed to Kubernetes')
    string(name: 'kubernetesCredentials', description: 'The Kubernetes credentials ID stored in Jenkins')
    string(name: 'kubernetesCluster', description: 'The Kubernetes cluster name in which to deploy')
    string(name: 'kubernetesBranchMapping', defaultValue: 'master', 
      description: 'The list of allowed branches for which deploy on Kubernetes')

    // Mattermost data
    booleanParam(name: 'toMattermost', defaultValue: false, description: 'Indicates whether the deployment is directed to Kubernetes')
    string(name: 'mattermostChannel', description: 'The Mattermost channel ID in which to send the notification')
    string(name: 'mattermostUrlWebHook', description: 'The Mattermost webhook to use to send the notification')

    // Second remote data
    booleanParam(name: 'toRemoteGit', defaultValue: false, description: 'Indicates whether the deployment is directed to a remote git')
    string(name: 'gitRemotes', description: 'The (semicolon separated) list of, comma separated values, remote urls and credentials')
    string(name: 'gitRemoteConfigEmail', description: 'The git email to use to push on remote')
    string(name: 'gitRemoteConfigName', description: 'The git name to use to push on remote')
    string(name: 'gitRemoteBranchMapping', defaultValue: 'develop:develop,release:release,master:master,hotfix:hotfix', 
      description: 'The map of allowed branches for which push on remote branch')

  }

  environment {

    // Gitlab properties
    gitlabCredentialsId = 'gitlab-sysdata'

    // SonarQube properties
    sonarServer = 'Sonar'

    // Docker properties
    registryURL = '******'
    registryCredential = '******'

  }

  agent any
  
  tools {
    jdk params.jdkVersion
    maven 'maven-3.8'
  }

  stages {

    stage('Getting environment') {
      steps {
        script {
          env.NORMALIZED_GIT_BRANCH = gitBranch.replace('origin/', '');
          echo "Running CI/CD with the following environment"
          echo "ProjectName: ${projectName}"
          echo "GitUrl: ${gitUrl}"
          echo "GitBranch: ${env.NORMALIZED_GIT_BRANCH}"
          git branch: env.NORMALIZED_GIT_BRANCH, credentialsId: gitlabCredentialsId, url: gitUrl
          env.GIT_TAG = sh(returnStdout: true, script: 'git tag -l --points-at HEAD').trim()
          echo "Git tag: ${env.GIT_TAG}"
          echo "Custom maven command for build: ${customMavenCommand}"
          echo "Deploy to Kubernetes: ${toKubernetes}"
          echo "Post to Mattermost: ${toMattermost}"
          echo "Push to remote git: ${toRemoteGit}"
          if (env.NORMALIZED_GIT_BRANCH.contains(gitProductionBranch) && (env.GIT_TAG == null || env.GIT_TAG == "")) {
              throw new Exception("To deploy in production a git tag is necessary")
          }
        }
      }
    }

    stage('Compiling application') {
      when {
        expression {
          return mavenBuildAllowed.toString() == "true"
        }
      }
      steps {
        script {
          echo "Compiling application"
          configFileProvider(
            [configFile(fileId: customMavenSettingsId, variable: 'MAVEN_SETTINGS')]) {
            sh "mvn -DskipTests clean package -s '${MAVEN_SETTINGS}' ${customMavenCommand}"
          }
        }
      }
    }
    
    stage('Test') {
      when {
        expression {
          return mavenTestsAllowed.toString() == "true"
        }
      }
      steps {
        echo 'Executing tests and creating reports for Jacoco'
        configFileProvider(
          [configFile(fileId: customMavenSettingsId, variable: 'MAVEN_SETTINGS')]) {
          sh "mvn -s '${MAVEN_SETTINGS}' surefire-report:report"
        }
      }
      
      post {
        always {
          // Make reports available for Jacoco
          junit 'target/surefire-reports/*.xml'
        }
      }
    }

    stage('SonarQube analysis') {
      when {
        expression {
          return isSonarAllowed().toString() == "true"
        }
      }
      steps {
	    script {
          checkAllowedDeploy()
		  
          try {
            // It requires SonarQube Scanner 2.8+
            def scannerHome = tool 'SonarQube Scanner';
            withSonarQubeEnv(sonarServer) {
              sh "${scannerHome}/bin/sonar-scanner"
            }
          } catch (Exception e) {
            echo "Error during reporting on SonarQube"
          }
	   	  }
	    }
	  }
	
	  stage("Quality Gate") {
      when {
        expression {
          return isSonarAllowed().toString() == "true"
        }
      }
      steps {
        script {
          checkAllowedDeploy()
		  
          timeout(time: 1, unit: 'HOURS') {
            // Waiting for quality gate response before going on
            waitForQualityGate abortPipeline: true
          }
        }
      }
    }

    stage('Building Docker image') {
      when {
        expression {
          return toKubernetes.toString() == "true" && isBranchKubernetesAllowed().toString() == "true"
        }
      }
      steps {
        script {
          checkAllowedDeploy()
          echo "Building Docker image"
          docker.withRegistry(registryURL + projectName, registryCredential) {
            def baseImage = docker.build(projectName + ":latest");
            baseImage.push()
            docker.build(projectName + ":${env.BUILD_NUMBER}").push()
            if (env.GIT_TAG != null && env.GIT_TAG != "") {
              docker.build(projectName + ":${env.GIT_TAG}").push()
            }
            echo "Docker image pushed"
          }
        }
      }
    }

    stage('Publishing on Kubernetes') {
      when {
        expression {
          return toKubernetes.toString() == "true" && isBranchKubernetesAllowed().toString() == "true"
        }
      }
      steps {
        script {
          checkAllowedDeploy()
          env.ENVIRONMENT = env.NORMALIZED_GIT_BRANCH;
          echo "Publishing on Kubernetes"
          sh "config/interpolate.sh"
          withCredentials([kubeconfigContent(credentialsId: kubernetesCredentials, variable: 'KUBECONFIG_CONTENT')]){
            sh '''echo "$KUBECONFIG_CONTENT" > kubeconfig'''
            // Update Kubernetes configuration
            sh("kubectl --kubeconfig=kubeconfig -f config/deployment.yml")
          }
        }
      }
    }

    stage('Publishing on remote Git') {
      when {
        expression {
          return toRemoteGit.toString() == "true"
        }
      }
      steps {
        script {
		      checkAllowedDeploy()
          def branchToPush = getGitRemoteMappedBranch();
          if (branchToPush != null) {
            echo "Pushing on remote Git to ${branchToPush} with git remotes: ${gitRemotes}"
            def remotes = gitRemotes.split(';')
            for (String remote : remotes) {
              def mapping = remote.split(',')
              def remoteGitCredentials = mapping[0]
              def remoteGitUrl = mapping[1]
              withCredentials([usernamePassword(credentialsId: remoteGitCredentials, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                sh "git config user.email ${gitRemoteConfigEmail}"
                sh "git config user.name ${gitRemoteConfigName}"
                sh "git checkout ${env.NORMALIZED_GIT_BRANCH}"
                sh "git -c http.sslVerify=false push --set-upstream https://${GIT_USERNAME}:${GIT_PASSWORD}@${remoteGitUrl} ${env.NORMALIZED_GIT_BRANCH}:${branchToPush}"
              }
            }
          } else {
            echo "Skipping push to remote Git due to a not recognized branch: ${env.NORMALIZED_GIT_BRANCH}"
          }
        }
      }
    }

  }
    
  post {
    always {
      echo 'One way or another, I have finished'
      deleteDir() /* Clean up workspace */
    }

    success {
      sendToMattermost("#a4c639", "Build n.${env.BUILD_NUMBER} of ${env.JOB_NAME} completed\n**Changes**:" + getChangeString())
    }

    unstable {
      sendToMattermost("#ffbf00", "Build Unstable!\n**Changes**:" + getChangeString())
    }

    failure {
      sendToMattermost("#c0392b", "WARNING -- Build FAILURE!!\n**Changes**:" + getChangeString())
    }

    // changed { }
  }

}

def sendToMattermost(String color, String message) {
  if (toMattermost.toString() == "true") {
    mattermostSend(color: color, icon: "https://jenkins.io/images/logos/jenkins/jenkins.png", message: message, channel: mattermostChannel, endpoint: mattermostUrlWebHook)
  } else {
    echo "Mattermost notification is disabled, skipping communication"
  }
}

@NonCPS
def isSonarAllowed() {
  def mappings = sonarAllowedBranches.split(',')
  for (String mapping : mappings) {
    // If the current branch matches with the expected and allowed branch
    if (env.NORMALIZED_GIT_BRANCH.contains(mapping)) {
      return true;
    }
  }
  echo "Sonar analysis not allowed for branch ${env.NORMALIZED_GIT_BRANCH}"
  return false;
}

@NonCPS
def isBranchKubernetesAllowed() {
  def mappings = kubernetesBranchMapping.split(',')
  for (String mapping : mappings) {
    // If the current branch matches with the expected and allowed branch
    if (env.NORMALIZED_GIT_BRANCH.contains(mapping)) {
      return true;
    }
  }
  echo "Kubernetes deploy not allowed for branch ${env.NORMALIZED_GIT_BRANCH}"
  return false;
}

// Example: with the mapping 'release:staging' 
// the release/1.0.0 branch will became staging/1.0.0
// No content will be returned if the are no matches
def getGitRemoteMappedBranch() {
  def maps = gitRemoteBranchMapping.split(',')
  for (String map : maps) {
    def mapping = map.split(':')
    def localBranch = mapping[0]
    def remoteBranch = mapping[1]
    echo "Checking ${localBranch} with ${env.NORMALIZED_GIT_BRANCH}; current replace: ${remoteBranch}"
    // If the current branch matches with the expected local branch
    if (env.NORMALIZED_GIT_BRANCH.contains(localBranch)) {
      return env.NORMALIZED_GIT_BRANCH.replace(localBranch, remoteBranch);
    }
  }
  echo "Pushing on remote Git not allowed for branch ${env.NORMALIZED_GIT_BRANCH}"
  return null;
}

// Extract latest changelog from git repository
@NonCPS
def getChangeString() {
  MAX_MSG_LEN = 100
  def changeString = ""

  echo "Gathering SCM changes"
  def changeLogSets = currentBuild.rawBuild.changeSets
  for (int i = 0; i < changeLogSets.size(); i++) {
    def entries = changeLogSets[i].items
    for (int j = 0; j < entries.length; j++) {
      def entry = entries[j]
      truncated_msg = entry.msg.take(MAX_MSG_LEN)
      changeString += " - ${truncated_msg} [${entry.author}]\n"
    }
  }

  if (!changeString) {
    changeString += " - No new changes"
  }
  return "\n" + changeString
}

// Use this method as condition to check if
// a deploy is allowed due to a pipeline status
def checkAllowedDeploy() {
  if (currentBuild.result == "UNSTABLE" || currentBuild.result == "FAILURE") {
    error()
  }
  return true
}